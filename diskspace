#!/usr/bin/env python3.4
#
# This file is part of diskspaced.
#
# diskspaced is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# diskspaced is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with diskspaced.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest disk usage data"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

DAEMONS = {
    'onemetre': daemons.onemetre_tcs_diskspace,
    'rasa': daemons.rasa_diskspace
}

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

def print_status(daemon):
    """Prints the current disk usage in human-readable form"""
    latest = None
    try:
        with daemon.connect() as diskspace:
            latest = diskspace.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the disk space daemon')
        return 1

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))
        print('Data partition: \033[1m{} / {} GiB ({}%) remaining\033[0m'.format(
            round(latest['data_fs_available_bytes'] / 2**30),
            round(latest['data_fs_total_bytes'] / 2**30),
            latest['data_fs_percent_available']))
        print()
    else:
        print('error: failed to query data')
    return 0

def print_json(daemon):
    """Prints the latest environment data in machine-readable form"""
    latest = None
    try:
        with daemon.connect() as diskspace:
            latest = diskspace.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the disk space daemon')
        return 1

    print(json.dumps(latest))

    return 0

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} [onemetre|rasa] <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the disk usage')
    print('   json        print a machine-readable summary of the disk usage')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) < 3 or sys.argv[1] not in DAEMONS:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[2] == 'status':
        sys.exit(print_status(DAEMONS[sys.argv[1]]))
    elif sys.argv[2] == 'json':
        sys.exit(print_json(DAEMONS[sys.argv[1]]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))
