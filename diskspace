#!/usr/bin/env python3
#
# This file is part of diskspaced.
#
# diskspaced is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# diskspaced is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with diskspaced.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest disk usage data"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.diskspace import Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command):
    """Runs a daemon command, handling error messages"""
    if 'DISKSPACED_CONFIG_PATH' in os.environ:
        config = Config(os.environ['DISKSPACED_CONFIG_PATH'], validate_directories=False)
    else:
        # Load the config file defined in the DISKSPACED_CONFIG_PATH environment variable or from the
        # default system location (/etc/diskspaced/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/diskspaced/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as DISKSPACED_CONFIG_PATH=/path/to/config.json diskspace <command>')
            return 1

        config = Config(files[0], validate_directories=False)

    try:
        ret = command(config)
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the disk space daemon')
        return 1

    sys.exit(ret)


def print_status(config):
    """Prints the current disk usage in human-readable form"""
    with config.daemon.connect() as diskspace:
        latest = diskspace.last_measurement()

    if latest is not None:
        available = round(latest['data_fs_available_bytes'] / 2**30)
        total = round(latest['data_fs_total_bytes'] / 2**30)
        percent = latest['data_fs_percent_available']
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print(f'Data received {TFmt.Bold}{date}{TFmt.Clear}:')
        print(f"Data partition: {TFmt.Bold}{available} / {total} GiB ({percent}%) remaining{TFmt.Clear}")
        print()
    else:
        print('error: failed to query data')
    return 0


def print_json(config):
    """Prints the latest environment data in machine-readable form"""
    with config.daemon.connect() as diskspace:
        latest = diskspace.last_measurement()

    print(json.dumps(latest))

    return 0


def print_usage():
    """Prints the utility help"""
    print(f'Usage: {SCRIPT_NAME} <command>')
    print()
    print('   status      print a human-readable summary of the disk usage')
    print('   json        print a machine-readable summary of the disk usage')
    print()
    return 0


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'json': print_json
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]]))

    sys.exit(print_usage())
