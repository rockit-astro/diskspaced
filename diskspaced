#!/usr/bin/env python3.6
#
# This file is part of diskspaced.
#
# diskspaced is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# diskspaced is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with diskspaced.  If not, see <http://www.gnu.org/licenses/>.

"""Data directory disk space monitor"""

import argparse
import datetime
import os
import Pyro4
from warwick.observatory.common import log
from warwick.observatory.diskspace import Config


class DiskSpaceDaemon:
    """Responds to disk usage queries"""
    def __init__(self, config):
        self._config = config

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        now = datetime.datetime.utcnow
        try:
            data = os.statvfs(self._config.data_root_path)
            data_available = data.f_frsize * data.f_bavail
            data_total = data.f_frsize * data.f_blocks
            data_percent = round(data_available * 100 / data_total)

            return {
                'date': now().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'data_fs_available_bytes': data_available,
                'data_fs_total_bytes': data_total,
                'data_fs_percent_available': data_percent,
            }

        except Exception:
            log.error(self._config.log_name, 'Failed to query disk usage')
            return None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Disk space daemon')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(DiskSpaceDaemon(c))
