#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Data directory disk space monitor"""

import argparse
import datetime
import shutil
import Pyro4
from rockit.common import log
from rockit.diskspace import Config


class DiskSpaceDaemon:
    """Responds to disk usage queries"""
    def __init__(self, config):
        self._config = config

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        # Uses datetime.timezone.utc rather than datetime.UTC for compatibility with python 3.9
        now = datetime.datetime.now(tz=datetime.timezone.utc)
        try:
            data = shutil.disk_usage(self._config.data_root_path)
            return {
                'date': now.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'data_fs_available_bytes': data.free,
                'data_fs_total_bytes': data.total,
                'data_fs_percent_available': round(data.free * 100. / data.total),
            }

        except Exception:
            log.error(self._config.log_name, 'Failed to query disk usage')
            return None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Disk space daemon')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(DiskSpaceDaemon(c))
